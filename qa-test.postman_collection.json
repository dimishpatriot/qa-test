{
	"info": {
		"_postman_id": "c990c543-d981-4b73-b8c4-abfd21a31718",
		"name": "qa-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "positive_tests",
			"item": [
				{
					"name": "/reset?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code >= 200 && pm.response.code < 400) {\r",
									"    // variables\r",
									"    const jsonData = pm.response.json();\r",
									"    const correctKeys = [\"status\"];\r",
									"\r",
									"    // main\r",
									"    pm.test(\"Status code 200\", function() {\r",
									"        pm.expect(pm.response.to.have.status(200));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Time to response lower than 500 ms\", function() {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have body\", function() {\r",
									"        pm.expect(pm.response.to.have.body());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have content-type in header\", function() {\r",
									"        pm.expect(pm.response.to.have.header(\"Content-Type\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have correct content type application/json\", function() {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"All required keys in json\", function() {\r",
									"        var goodKeys = true;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                goodKeys = false;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodKeys).is.equal(true);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Have not foreing keys\", function() {\r",
									"        var foreingKeys = false;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                foreingKeys = true;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(foreingKeys).is.equal(false);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"json.status is OK\", function() {\r",
									"        pm.expect(jsonData.status).is.equal(\"OK\");\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Get correct response\", function() {\r",
									"        pm.expect(false).is.equal(true);\r",
									"    })\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/reset",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "/index?offset&count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code >= 200 && pm.response.code < 400) {\r",
									"    // variables\r",
									"    const jsonData = pm.response.json();\r",
									"    const correctKeys = [\"status\", \"result\"];\r",
									"    const first_user_id = pm.variables.get(\"first_user_id\");\r",
									"    const offset = pm.variables.get(\"offset\");\r",
									"    const count = pm.variables.get(\"count\");\r",
									"    const users = jsonData.result;\r",
									"\r",
									"    var ids = [];\r",
									"    for (i in users) {\r",
									"        ids.push(users[i].id);\r",
									"    };\r",
									"\r",
									"    // main\r",
									"    pm.test(\"Status code 200\", function() {\r",
									"        pm.expect(pm.response.to.have.status(200));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Time to response lower than 500 ms\", function() {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have body\", function() {\r",
									"        pm.expect(pm.response.to.have.body());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have content-type in header\", function() {\r",
									"        pm.expect(pm.response.to.have.header(\"Content-Type\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have correct content type application/json\", function() {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"All required keys in json\", function() {\r",
									"        var goodKeys = true;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                goodKeys = false;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodKeys).is.equal(true);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Have not foreing keys\", function() {\r",
									"        var foreingKeys = false;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                foreingKeys = true;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(foreingKeys).is.equal(false);\r",
									"    });\r",
									"\r",
									"    pm.test(\"json.status is OK\", function() {\r",
									"        pm.expect(jsonData.status).is.equal(\"OK\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Correct offset\", function() {\r",
									"        var current_id = jsonData.result[0].id\r",
									"        pm.expect(current_id - first_user_id).is.equal(pm.variables.get(\"offset\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Correct count of results\", function() {\r",
									"        pm.expect(count).is.equal(ids.length);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Results is sorted by id ascending\", function() {\r",
									"        var sorted_ids = [...ids].sort();\r",
									"        pm.expect(JSON.stringify(ids)).is.equal(JSON.stringify(sorted_ids));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.id is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].id) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.name is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].name) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Get correct response\", function() {\r",
									"        pm.expect(false).is.equal(true);\r",
									"    })\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"offset\", 1);\r",
									"pm.variables.set(\"count\", 2);\r",
									"\r",
									"url = pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\")\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"}, function (err, res) {\r",
									"    pm.variables.set(\"first_user_id\", res.json().result[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}?offset={{offset}}&count={{count}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								},
								{
									"key": "count",
									"value": "{{count}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/index?count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code >= 200 && pm.response.code < 400) {\r",
									"    // variables\r",
									"    const jsonData = pm.response.json();\r",
									"    const correctKeys = [\"status\", \"result\"];\r",
									"    const first_user_id = pm.variables.get(\"first_user_id\");\r",
									"    const offset = pm.variables.get(\"offset\");\r",
									"    const count = pm.variables.get(\"count\");\r",
									"    const users = jsonData.result;\r",
									"\r",
									"    var ids = [];\r",
									"    for (i in users) {\r",
									"        ids.push(users[i].id);\r",
									"    };\r",
									"\r",
									"    // main\r",
									"    pm.test(\"Status code 200\", function() {\r",
									"        pm.expect(pm.response.to.have.status(200));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Time to response lower than 500 ms\", function() {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have body\", function() {\r",
									"        pm.expect(pm.response.to.have.body());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have content-type in header\", function() {\r",
									"        pm.expect(pm.response.to.have.header(\"Content-Type\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have correct content type application/json\", function() {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"All required keys in json\", function() {\r",
									"        var goodKeys = true;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                goodKeys = false;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodKeys).is.equal(true);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Have not foreing keys\", function() {\r",
									"        var foreingKeys = false;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                foreingKeys = true;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(foreingKeys).is.equal(false);\r",
									"    });\r",
									"\r",
									"    pm.test(\"json.status is OK\", function() {\r",
									"        pm.expect(jsonData.status).is.equal(\"OK\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Offset is equal zero\", function() {\r",
									"        var current_id = jsonData.result[0].id\r",
									"        pm.expect(current_id - first_user_id).is.equal(0);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Correct count of results\", function() {\r",
									"        pm.expect(count).is.equal(ids.length);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Results is sorted by id ascending\", function() {\r",
									"        var sorted_ids = [...ids].sort();\r",
									"        pm.expect(JSON.stringify(ids)).is.equal(JSON.stringify(sorted_ids));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.id is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].id) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.name is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].name) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Get correct response\", function() {\r",
									"        pm.expect(false).is.equal(true);\r",
									"    })\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"count\", 2);\r",
									"\r",
									"url = pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\")\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"}, function (err, res) {\r",
									"    pm.variables.set(\"first_user_id\", res.json().result[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/index?count={{count}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"index"
							],
							"query": [
								{
									"key": "count",
									"value": "{{count}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/index?offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code >= 200 && pm.response.code < 400) {\r",
									"    // variables\r",
									"    const jsonData = pm.response.json();\r",
									"    const correctKeys = [\"status\", \"result\"];\r",
									"    const first_user_id = pm.variables.get(\"first_user_id\");\r",
									"    const offset = pm.variables.get(\"offset\");\r",
									"    const count = pm.variables.get(\"count\");\r",
									"    const users = jsonData.result;\r",
									"\r",
									"    var ids = [];\r",
									"    for (i in users) {\r",
									"        ids.push(users[i].id);\r",
									"    };\r",
									"\r",
									"    // main\r",
									"    pm.test(\"Status code 200\", function() {\r",
									"        pm.expect(pm.response.to.have.status(200));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Time to response lower than 500 ms\", function() {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have body\", function() {\r",
									"        pm.expect(pm.response.to.have.body());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have content-type in header\", function() {\r",
									"        pm.expect(pm.response.to.have.header(\"Content-Type\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have correct content type application/json\", function() {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"All required keys in json\", function() {\r",
									"        var goodKeys = true;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                goodKeys = false;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodKeys).is.equal(true);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Have not foreing keys\", function() {\r",
									"        var foreingKeys = false;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                foreingKeys = true;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(foreingKeys).is.equal(false);\r",
									"    });\r",
									"\r",
									"    pm.test(\"json.status is OK\", function() {\r",
									"        pm.expect(jsonData.status).is.equal(\"OK\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Correct offset\", function() {\r",
									"        var current_id = jsonData.result[0].id\r",
									"        pm.expect(current_id - first_user_id).is.equal(pm.variables.get(\"offset\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Results is sorted by id ascending\", function() {\r",
									"        var sorted_ids = [...ids].sort();\r",
									"        pm.expect(JSON.stringify(ids)).is.equal(JSON.stringify(sorted_ids));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.id is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].id) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.name is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].name) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Get correct response\", function() {\r",
									"        pm.expect(false).is.equal(true);\r",
									"    })\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"offset\", 5);\r",
									"\r",
									"url = pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\")\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"}, function (err, res) {\r",
									"    pm.variables.set(\"first_user_id\", res.json().result[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}?offset={{offset}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/get?id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code >= 200 && pm.response.code < 400) {\r",
									"    // variables\r",
									"    const jsonData = pm.response.json();\r",
									"    const correctKeys = [\"status\", \"result\"];\r",
									"    const first_user_id = pm.variables.get(\"first_user_id\");\r",
									"    const offset = pm.variables.get(\"offset\");\r",
									"    const count = pm.variables.get(\"count\");\r",
									"    const users = jsonData.result;\r",
									"\r",
									"    var ids = [];\r",
									"    for (i in users) {\r",
									"        ids.push(users[i].id);\r",
									"    };\r",
									"\r",
									"    // main\r",
									"    pm.test(\"Status code 200\", function() {\r",
									"        pm.expect(pm.response.to.have.status(200));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Time to response lower than 500 ms\", function() {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have body\", function() {\r",
									"        pm.expect(pm.response.to.have.body());\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have content-type in header\", function() {\r",
									"        pm.expect(pm.response.to.have.header(\"Content-Type\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response to have correct content type application/json\", function() {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    });\r",
									"\r",
									"    // keys in json\r",
									"    pm.test(\"All required keys in json\", function() {\r",
									"        var goodKeys = true;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                goodKeys = false;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodKeys).is.equal(true);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Have not foreing keys\", function() {\r",
									"        var foreingKeys = false;\r",
									"        for(var key in jsonData) {\r",
									"            if (correctKeys.indexOf(key) == -1) {\r",
									"                foreingKeys = true;\r",
									"            };\r",
									"        };\r",
									"        pm.expect(foreingKeys).is.equal(false);\r",
									"    });\r",
									"\r",
									"    pm.test(\"json.status is OK\", function() {\r",
									"        pm.expect(jsonData.status).is.equal(\"OK\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Correct id in result\", function() {\r",
									"        var current_id = jsonData.result[0].id\r",
									"        pm.expect(current_id).is.equal(pm.variables.get(\"id\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Count of results is one\", function() {\r",
									"        pm.expect(count).is.equal(1);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.id is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].id) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"\r",
									"    pm.test(\"Type of result.name is string\", function() {\r",
									"        goodType = \"string\";\r",
									"        for (i in users) {\r",
									"            if (typeof(users[i].name) != \"string\") {\r",
									"                goodType = typeof(users[i].id);\r",
									"            };\r",
									"        };\r",
									"        pm.expect(goodType).is.equal(\"string\");    \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Get correct response\", function() {\r",
									"        pm.expect(false).is.equal(true);\r",
									"    })\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"url = pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\")\r",
									"pm.sendRequest({\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"}, function (err, res) {\r",
									"    pm.variables.set(\"first_user_id\", res.json().result[0].id);\r",
									"    pm.variables.set(\"id\", res.json().result[0].id + 2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/get?id={{id}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"get"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "first_user_id",
			"value": ""
		}
	]
}